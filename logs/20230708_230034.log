2023-07-08 23:00:34,058 - INFO - Ingesting data with config DataIngestionConfig(train_data_path=data\train, test_data_path=data\validation, load_images=<function load_image at 0x000001440A015670>)
2023-07-08 23:00:40,223 - INFO - Transforming data with DataTransformationConfig(channel_features=['mean', 'std', 'median', 'mode', 'min', 'max', 'range', 'skewness', 'kurtosis', 'entropy', 'quantile_0.25', 'quantile_0.75', 'iqr'], histogram_features=['mean', 'std', 'median', 'mode', 'min', 'max', 'range', 'skewness', 'kurtosis', 'entropy', 'R'], coocurrence_matrix_features=['contrast', 'dissimilarity', 'homogeneity', 'energy', 'correlation'], to_grayscale=<function to_grayscale at 0x000001440A015790>, to_histogram=<function to_histogram at 0x000001440A1149D0>)
2023-07-08 23:01:32,956 - INFO - Saving features in data\train_features.csv and data\test_features.csv
2023-07-08 23:01:33,249 - INFO - Training models with 68 features with config ModelTrainerConfig(k_features_grid=[10, 20, 40, 'all'], feature_selection_score_function=<function mutual_info_classif at 0x000001440A015280>, models=[Model(model_name=Logistic Regression, model_parameter_grid={'penalty': ['l1', 'l2', 'elasticnet', 'none'], 'C': [0.1, 0.5, 1.0, 2.0, 5.0], 'solver': ['newton-cg', 'lbfgs', 'liblinear', 'sag', 'saga'], 'max_iter': [200, 500, 1000], 'n_jobs': [-1], 'random_state': [42]}, model=LogisticRegression()), Model(model_name=Random Forest, model_parameter_grid={'n_estimators': [100, 200, 500, 1000], 'criterion': ['gini', 'entropy', 'log_loss'], 'max_depth': [None, 10, 20, 50, 100]}, model=RandomForestClassifier()), Model(model_name=KNN, model_parameter_grid={'n_neighbors': [3, 5, 7, 9, 11], 'weights': ['uniform', 'distance'], 'leaf_size': [10, 20, 30, 40, 50], 'p': [1, 2], 'n_jobs': [-1]}, model=KNeighborsClassifier()), Model(model_name=SVM, model_parameter_grid={'C': [0.1, 0.5, 1.0, 2.0, 5.0], 'kernel': ['linear', 'poly', 'rbf', 'sigmoid'], 'degree': [1, 2, 3, 4, 5], 'gamma': ['scale', 'auto'], 'max_iter': [200, 500, 1000], 'random_state': [42]}, model=SVC())], target_column=label, score_criteria=f1_micro, cv=5)
